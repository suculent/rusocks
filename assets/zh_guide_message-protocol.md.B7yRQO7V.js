import{_ as e,c as l,o as i,ae as s}from"./chunks/framework.U1Gow_7P.js";const u=JSON.parse('{"title":"消息协议","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/message-protocol.md","filePath":"zh/guide/message-protocol.md"}'),o={name:"zh/guide/message-protocol.md"};function t(n,a,r,c,p,h){return i(),l("div",null,a[0]||(a[0]=[s(`<h1 id="消息协议" tabindex="-1">消息协议 <a class="header-anchor" href="#消息协议" aria-label="Permalink to &quot;消息协议&quot;">​</a></h1><p>LinkSocks 在 WebSocket 上使用自定义二进制消息协议。本页详细介绍了消息传输机制和协议规范。</p><h3 id="协议版本" tabindex="-1">协议版本 <a class="header-anchor" href="#协议版本" aria-label="Permalink to &quot;协议版本&quot;">​</a></h3><p>当前协议版本：<code>0x01</code></p><h2 id="消息类型" tabindex="-1">消息类型 <a class="header-anchor" href="#消息类型" aria-label="Permalink to &quot;消息类型&quot;">​</a></h2><h3 id="身份验证消息" tabindex="-1">身份验证消息 <a class="header-anchor" href="#身份验证消息" aria-label="Permalink to &quot;身份验证消息&quot;">​</a></h3><p><strong>AuthMessage</strong>：客户端到服务器的初始身份验证</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Version(1) + Type(1) + TokenLen(1) + Token(N) + Reverse(1) + Instance(16)</span></span></code></pre></div><p><strong>AuthResponseMessage</strong>：服务器对身份验证的响应</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Version(1) + Type(1) + Success(1) + [ErrorLen(1) + Error(N) if !Success]</span></span></code></pre></div><h3 id="连接管理" tabindex="-1">连接管理 <a class="header-anchor" href="#连接管理" aria-label="Permalink to &quot;连接管理&quot;">​</a></h3><p><strong>ConnectMessage</strong>：请求建立新连接</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Version(1) + Type(1) + Protocol(1) + ChannelID(16) + [AddrLen(1) + Addr(N) + Port(2) if TCP]</span></span></code></pre></div><p><strong>ConnectResponseMessage</strong>：对连接请求的响应</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Version(1) + Type(1) + Success(1) + ChannelID(16) + [ErrorLen(1) + Error(N) if !Success]</span></span></code></pre></div><p><strong>DisconnectMessage</strong>：请求关闭连接</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Version(1) + Type(1) + ChannelID(16) + [ErrorLen(1) + Error(N) if error]</span></span></code></pre></div><h3 id="数据传输" tabindex="-1">数据传输 <a class="header-anchor" href="#数据传输" aria-label="Permalink to &quot;数据传输&quot;">​</a></h3><p><strong>DataMessage</strong>：客户端和服务器之间的数据传输</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Version(1) + Type(1) + Protocol(1) + ChannelID(16) + Compression(1) + DataLen(4) + Data(N) +</span></span>
<span class="line"><span>    [AddrLen(1) + Addr(N) + Port(2) if UDP]</span></span></code></pre></div><h2 id="通道管理" tabindex="-1">通道管理 <a class="header-anchor" href="#通道管理" aria-label="Permalink to &quot;通道管理&quot;">​</a></h2><h3 id="通道标识" tabindex="-1">通道标识 <a class="header-anchor" href="#通道标识" aria-label="Permalink to &quot;通道标识&quot;">​</a></h3><p>每个代理连接都被分配一个唯一的 <code>ChannelID</code>（UUID），它有多个用途：</p><ul><li>在 WebSocket 连接中链接相关消息</li><li>通过单个 WebSocket 启用多个代理连接的多路复用</li><li>在代理代理模式下促进消息路由</li></ul><h3 id="消息队列" tabindex="-1">消息队列 <a class="header-anchor" href="#消息队列" aria-label="Permalink to &quot;消息队列&quot;">​</a></h3><p>LinkSocks 使用特定于通道的消息队列来处理异步消息传递。每个通道都有自己的消息队列，缓冲区大小为 1000 条消息。当队列满时，新消息将被丢弃以防止内存耗尽。</p><h3 id="通道清理" tabindex="-1">通道清理 <a class="header-anchor" href="#通道清理" aria-label="Permalink to &quot;通道清理&quot;">​</a></h3><p>当连接关闭时，系统会自动：</p><ul><li>从活动通道映射中删除通道</li><li>关闭并删除关联的消息队列</li><li>清理任何待处理的 goroutine</li></ul><h2 id="tcp-连接流程" tabindex="-1">TCP 连接流程 <a class="header-anchor" href="#tcp-连接流程" aria-label="Permalink to &quot;TCP 连接流程&quot;">​</a></h2><h3 id="正向代理模式" tabindex="-1">正向代理模式 <a class="header-anchor" href="#正向代理模式" aria-label="Permalink to &quot;正向代理模式&quot;">​</a></h3><ol><li><strong>连接请求</strong>：客户端发送带有目标地址和端口的 ConnectMessage</li><li><strong>服务器处理</strong>：服务器尝试建立到目标的连接</li><li><strong>响应</strong>：服务器发送 ConnectResponseMessage 指示成功或失败</li><li><strong>数据交换</strong>：双向 DataMessage 交换直到连接关闭</li><li><strong>清理</strong>：任何一方关闭时发送 DisconnectMessage</li></ol><h3 id="反向代理模式" tabindex="-1">反向代理模式 <a class="header-anchor" href="#反向代理模式" aria-label="Permalink to &quot;反向代理模式&quot;">​</a></h3><p>在反向代理模式下，服务器向客户端发起连接：</p><ol><li><strong>服务器请求</strong>：服务器发送带有目标地址和端口的 ConnectMessage</li><li><strong>客户端处理</strong>：客户端尝试建立到目标的连接</li><li><strong>响应</strong>：客户端发送 ConnectResponseMessage 指示成功或失败</li><li><strong>数据交换</strong>：双向 DataMessage 交换直到连接关闭</li><li><strong>清理</strong>：任何一方关闭时发送 DisconnectMessage</li></ol><h2 id="udp-处理" tabindex="-1">UDP 处理 <a class="header-anchor" href="#udp-处理" aria-label="Permalink to &quot;UDP 处理&quot;">​</a></h2><p>由于 UDP 的无连接性质，UDP over SOCKS5 需要特殊处理。该过程涉及 SOCKS5 UDP 关联和 WebSocket 消息交换。</p><h3 id="socks5-udp-关联过程" tabindex="-1">SOCKS5 UDP 关联过程 <a class="header-anchor" href="#socks5-udp-关联过程" aria-label="Permalink to &quot;SOCKS5 UDP 关联过程&quot;">​</a></h3><p>当 SOCKS5 客户端请求 UDP ASSOCIATE（cmd=0x03）时：</p><ol><li><p><strong>本地 UDP 监听器创建</strong></p><ul><li>LinkSocks 在可用端口上创建本地 UDP 监听器</li><li>此监听器将从 SOCKS5 客户端接收 UDP 数据包</li><li>监听器地址返回给 SOCKS5 客户端</li></ul></li><li><p><strong>WebSocket 连接设置</strong></p><ul><li>LinkSocks 使用 Protocol=&quot;udp&quot; 向服务器发送 ConnectMessage</li><li>ChannelID 标识此 UDP 关联</li><li>UDP 的初始 ConnectMessage 中不包含目标地址</li></ul></li><li><p><strong>SOCKS5 响应</strong></p><ul><li>LinkSocks 使用本地 UDP 监听器地址响应 SOCKS5 客户端</li><li>客户端将 UDP 数据包发送到此地址进行转发</li></ul></li></ol><h3 id="udp-数据处理流程" tabindex="-1">UDP 数据处理流程 <a class="header-anchor" href="#udp-数据处理流程" aria-label="Permalink to &quot;UDP 数据处理流程&quot;">​</a></h3><h4 id="客户端-→-服务器方向" tabindex="-1">客户端 → 服务器方向 <a class="header-anchor" href="#客户端-→-服务器方向" aria-label="Permalink to &quot;客户端 → 服务器方向&quot;">​</a></h4><ol><li><p><strong>数据包接收</strong></p><ul><li>本地 UDP 监听器从 SOCKS5 客户端接收数据包</li><li>数据包包含带有目标地址信息的 SOCKS5 UDP 头</li></ul></li><li><p><strong>SOCKS5 UDP 头解析</strong></p><ul><li>从 SOCKS5 UDP 头格式中提取目标地址和端口：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RSV(2) + FRAG(1) + ATYP(1) + DST.ADDR(var) + DST.PORT(2) + DATA(var)</span></span></code></pre></div></li></ul></li><li><p><strong>WebSocket 传输</strong></p><ul><li>使用提取的目标地址创建 DataMessage</li><li>通过 WebSocket 发送到服务器，Protocol=&quot;udp&quot;</li></ul></li></ol><h4 id="服务器-→-客户端方向" tabindex="-1">服务器 → 客户端方向 <a class="header-anchor" href="#服务器-→-客户端方向" aria-label="Permalink to &quot;服务器 → 客户端方向&quot;">​</a></h4><ol><li><p><strong>服务器接收</strong></p><ul><li>服务器从远程目标接收 UDP 数据包</li><li>服务器知道传入数据包的源地址</li></ul></li><li><p><strong>SOCKS5 UDP 头构造</strong></p><ul><li>服务器使用源地址信息构造 SOCKS5 UDP 头</li><li>格式符合 SOCKS5 规范</li></ul></li><li><p><strong>WebSocket 传输</strong></p><ul><li>使用 SOCKS5 UDP 头 + 数据创建 DataMessage</li><li>通过 WebSocket 发送到客户端</li></ul></li><li><p><strong>客户端转发</strong></p><ul><li>客户端接收 DataMessage 并转发到本地 UDP 监听器</li><li>SOCKS5 客户端接收具有正确源地址信息的数据包</li></ul></li></ol><h3 id="udp-连接生命周期" tabindex="-1">UDP 连接生命周期 <a class="header-anchor" href="#udp-连接生命周期" aria-label="Permalink to &quot;UDP 连接生命周期&quot;">​</a></h3><ul><li><strong>关联</strong>：持续到 SOCKS5 TCP 控制连接关闭</li><li><strong>超时</strong>：UDP 关联如果不活动可能会超时</li><li><strong>清理</strong>：关联结束时，本地 UDP 监听器关闭并释放资源</li></ul><h2 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h2><h3 id="数据压缩" tabindex="-1">数据压缩 <a class="header-anchor" href="#数据压缩" aria-label="Permalink to &quot;数据压缩&quot;">​</a></h3><p>当数据大小超过压缩阈值时（默认：512KB，可通过 <code>WithCompressionThreshold</code> 配置），DataMessage 支持条件压缩。DataMessage 中的压缩标志设置为 0x01 表示 gzip 压缩。</p><h3 id="批处理" tabindex="-1">批处理 <a class="header-anchor" href="#批处理" aria-label="Permalink to &quot;批处理&quot;">​</a></h3><p>LinkSocks 为网络数据读取实现动态批处理：</p><p><strong>SendManager 批处理</strong></p><ul><li>网络数据在创建 DataMessage 之前在缓冲区中批处理</li><li>默认批处理等待时间：最少 20ms，最多 500ms</li><li>自适应批处理根据连接速度调整延迟</li><li>延迟到期或缓冲区满时基于定时器的刷新</li></ul><p><strong>批处理控制</strong></p><ul><li>可以通过 <code>WithDynamicBatching(false)</code> 禁用动态批处理以立即发送</li><li>高速连接增加批处理延迟</li><li>低速连接减少批处理延迟</li><li>缓冲区大小和时间限制可通过 <code>WithBatchingTimeLimits</code> 配置</li></ul><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h2><h3 id="客户端-服务器连接失败" tabindex="-1">客户端-服务器连接失败 <a class="header-anchor" href="#客户端-服务器连接失败" aria-label="Permalink to &quot;客户端-服务器连接失败&quot;">​</a></h3><p><strong>当令牌验证失败时</strong></p><ul><li>服务器发送 <code>AuthResponseMessage{Success: false, Error: &quot;invalid token&quot;}</code></li><li>WebSocket 连接立即关闭</li><li>客户端接收 nonRetriableError 并停止重连尝试</li></ul><p><strong>当 WebSocket 连接丢失时</strong></p><ul><li>客户端检查是否启用重连且错误不是 nonRetriableError</li><li>在尝试重连之前等待 ReconnectDelay（默认：5s；可通过 ClientOption.WithReconnectDelay 配置）</li><li>现有通道保留在内存中，DataMessage 继续排队</li><li>成功重连后数据传输恢复</li></ul><p><strong>当没有可用客户端进行负载均衡时</strong></p><ul><li>服务器等待 10 秒寻找可用的反向代理客户端</li><li>使用轮询选择和 ping 活跃性检查</li><li>如果 ping 失败，选择下一个可用客户端</li><li>10 秒后没有客户端，向 SOCKS5 客户端发送错误代码 0x03</li></ul><h3 id="网络连接失败" tabindex="-1">网络连接失败 <a class="header-anchor" href="#网络连接失败" aria-label="Permalink to &quot;网络连接失败&quot;">​</a></h3><p><strong>当目标服务器连接失败时</strong></p><ul><li>正常模式：立即发送 <code>ConnectResponseMessage{Success: false, Error: details}</code></li><li>SOCKS5 客户端接收错误响应（代码 0x04）并关闭连接</li><li>FastOpen 模式：最初假设成功，在第一次数据传输时检测失败</li><li>FastOpen 超时：如果在 ConnectTimeout+5 秒后没有成功确认则断开通道</li></ul><p><strong>当远程对等方关闭连接时</strong></p><ul><li>发送 <code>DisconnectMessage{ChannelID: channelID, Error: details}</code></li><li>清理资源：删除消息队列，从通道映射中删除，取消上下文</li><li>关闭 SOCKS5 客户端连接以发出终止信号</li></ul><p><strong>当连接异常关闭时</strong></p><ul><li>通道清理器每 60 秒检查一次活动</li><li>12 小时不活动的通道自动清理</li><li>RST 数据包或网络超时触发立即资源清理</li><li>单个通道故障不影响同一 WebSocket 上的其他通道</li></ul>`,71)]))}const g=e(o,[["render",t]]);export{u as __pageData,g as default};
