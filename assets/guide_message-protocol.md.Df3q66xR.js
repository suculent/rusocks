import{_ as n,c as a,o as s,ae as i}from"./chunks/framework.U1Gow_7P.js";const u=JSON.parse('{"title":"Message Protocol","description":"","frontmatter":{},"headers":[],"relativePath":"guide/message-protocol.md","filePath":"guide/message-protocol.md"}'),o={name:"guide/message-protocol.md"};function t(r,e,l,c,d,h){return s(),a("div",null,e[0]||(e[0]=[i(`<h1 id="message-protocol" tabindex="-1">Message Protocol <a class="header-anchor" href="#message-protocol" aria-label="Permalink to &quot;Message Protocol&quot;">​</a></h1><p>LinkSocks uses a custom binary message protocol over WebSocket. This page details the message transmission mechanisms and protocol specifications.</p><h3 id="protocol-version" tabindex="-1">Protocol Version <a class="header-anchor" href="#protocol-version" aria-label="Permalink to &quot;Protocol Version&quot;">​</a></h3><p>Current protocol version: <code>0x01</code></p><h2 id="message-types" tabindex="-1">Message Types <a class="header-anchor" href="#message-types" aria-label="Permalink to &quot;Message Types&quot;">​</a></h2><h3 id="authentication-messages" tabindex="-1">Authentication Messages <a class="header-anchor" href="#authentication-messages" aria-label="Permalink to &quot;Authentication Messages&quot;">​</a></h3><p><strong>AuthMessage</strong>: Initial authentication from client to server</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Version(1) + Type(1) + TokenLen(1) + Token(N) + Reverse(1) + Instance(16)</span></span></code></pre></div><p><strong>AuthResponseMessage</strong>: Server response to authentication</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Version(1) + Type(1) + Success(1) + [ErrorLen(1) + Error(N) if !Success]</span></span></code></pre></div><h3 id="connection-management" tabindex="-1">Connection Management <a class="header-anchor" href="#connection-management" aria-label="Permalink to &quot;Connection Management&quot;">​</a></h3><p><strong>ConnectMessage</strong>: Request to establish a new connection</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Version(1) + Type(1) + Protocol(1) + ChannelID(16) + [AddrLen(1) + Addr(N) + Port(2) if TCP]</span></span></code></pre></div><p><strong>ConnectResponseMessage</strong>: Response to connection request</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Version(1) + Type(1) + Success(1) + ChannelID(16) + [ErrorLen(1) + Error(N) if !Success]</span></span></code></pre></div><p><strong>DisconnectMessage</strong>: Request to close a connection</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Version(1) + Type(1) + ChannelID(16) + [ErrorLen(1) + Error(N) if error]</span></span></code></pre></div><h3 id="data-transfer" tabindex="-1">Data Transfer <a class="header-anchor" href="#data-transfer" aria-label="Permalink to &quot;Data Transfer&quot;">​</a></h3><p><strong>DataMessage</strong>: Data transmission between client and server</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Version(1) + Type(1) + Protocol(1) + ChannelID(16) + Compression(1) + DataLen(4) + Data(N) +</span></span>
<span class="line"><span>    [AddrLen(1) + Addr(N) + Port(2) if UDP]</span></span></code></pre></div><h2 id="channel-management" tabindex="-1">Channel Management <a class="header-anchor" href="#channel-management" aria-label="Permalink to &quot;Channel Management&quot;">​</a></h2><h3 id="channel-identification" tabindex="-1">Channel Identification <a class="header-anchor" href="#channel-identification" aria-label="Permalink to &quot;Channel Identification&quot;">​</a></h3><p>Each proxy connection is assigned a unique <code>ChannelID</code> (UUID) that serves multiple purposes:</p><ul><li>Links related messages across the WebSocket connection</li><li>Enables multiplexing multiple proxy connections over a single WebSocket</li><li>Facilitates message routing in agent proxy mode</li></ul><h3 id="message-queuing" tabindex="-1">Message Queuing <a class="header-anchor" href="#message-queuing" aria-label="Permalink to &quot;Message Queuing&quot;">​</a></h3><p>LinkSocks uses channel-specific message queues to handle asynchronous message delivery. Each channel gets its own message queue with a buffer size of 1000 messages. When the queue is full, new messages are dropped to prevent memory exhaustion.</p><h3 id="channel-cleanup" tabindex="-1">Channel Cleanup <a class="header-anchor" href="#channel-cleanup" aria-label="Permalink to &quot;Channel Cleanup&quot;">​</a></h3><p>When connections close, the system automatically:</p><ul><li>Removes the channel from active channel maps</li><li>Closes and removes the associated message queue</li><li>Cleans up any pending goroutines</li></ul><h2 id="tcp-connection-flow" tabindex="-1">TCP Connection Flow <a class="header-anchor" href="#tcp-connection-flow" aria-label="Permalink to &quot;TCP Connection Flow&quot;">​</a></h2><h3 id="forward-proxy-mode" tabindex="-1">Forward Proxy Mode <a class="header-anchor" href="#forward-proxy-mode" aria-label="Permalink to &quot;Forward Proxy Mode&quot;">​</a></h3><ol><li><strong>Connection Request</strong>: Client sends ConnectMessage with target address and port</li><li><strong>Server Processing</strong>: Server attempts to establish connection to target</li><li><strong>Response</strong>: Server sends ConnectResponseMessage indicating success or failure</li><li><strong>Data Exchange</strong>: Bidirectional DataMessage exchange until connection closes</li><li><strong>Cleanup</strong>: DisconnectMessage sent when either side closes</li></ol><h3 id="reverse-proxy-mode" tabindex="-1">Reverse Proxy Mode <a class="header-anchor" href="#reverse-proxy-mode" aria-label="Permalink to &quot;Reverse Proxy Mode&quot;">​</a></h3><p>In reverse proxy mode, the server initiates connections to the client:</p><ol><li><strong>Server Request</strong>: Server sends ConnectMessage with target address and port</li><li><strong>Client Processing</strong>: Client attempts to establish connection to target</li><li><strong>Response</strong>: Client sends ConnectResponseMessage indicating success or failure</li><li><strong>Data Exchange</strong>: Bidirectional DataMessage exchange until connection closes</li><li><strong>Cleanup</strong>: DisconnectMessage sent when either side closes</li></ol><h2 id="udp-handling" tabindex="-1">UDP Handling <a class="header-anchor" href="#udp-handling" aria-label="Permalink to &quot;UDP Handling&quot;">​</a></h2><p>UDP over SOCKS5 requires special handling due to its connectionless nature. The process involves SOCKS5 UDP association and WebSocket message exchange.</p><h3 id="socks5-udp-association-process" tabindex="-1">SOCKS5 UDP Association Process <a class="header-anchor" href="#socks5-udp-association-process" aria-label="Permalink to &quot;SOCKS5 UDP Association Process&quot;">​</a></h3><p>When a SOCKS5 client requests UDP ASSOCIATE (cmd=0x03):</p><ol><li><p><strong>Local UDP Listener Creation</strong></p><ul><li>LinkSocks creates a local UDP listener on an available port</li><li>This listener will receive UDP packets from the SOCKS5 client</li><li>The listener address is returned to the SOCKS5 client</li></ul></li><li><p><strong>WebSocket Connection Setup</strong></p><ul><li>LinkSocks sends a ConnectMessage to the server with Protocol=&quot;udp&quot;</li><li>The ChannelID identifies this UDP association</li><li>No target address is included in the initial ConnectMessage for UDP</li></ul></li><li><p><strong>SOCKS5 Response</strong></p><ul><li>LinkSocks responds to the SOCKS5 client with the local UDP listener address</li><li>The client will send UDP packets to this address for forwarding</li></ul></li></ol><h3 id="udp-data-processing-flow" tabindex="-1">UDP Data Processing Flow <a class="header-anchor" href="#udp-data-processing-flow" aria-label="Permalink to &quot;UDP Data Processing Flow&quot;">​</a></h3><h4 id="client-→-server-direction" tabindex="-1">Client → Server Direction <a class="header-anchor" href="#client-→-server-direction" aria-label="Permalink to &quot;Client → Server Direction&quot;">​</a></h4><ol><li><p><strong>Packet Reception</strong></p><ul><li>Local UDP listener receives packet from SOCKS5 client</li><li>Packet includes SOCKS5 UDP header with target address information</li></ul></li><li><p><strong>SOCKS5 UDP Header Parsing</strong></p><ul><li>Extract target address and port from SOCKS5 UDP header format:<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RSV(2) + FRAG(1) + ATYP(1) + DST.ADDR(var) + DST.PORT(2) + DATA(var)</span></span></code></pre></div></li></ul></li><li><p><strong>WebSocket Transmission</strong></p><ul><li>Create DataMessage with extracted target address</li><li>Send via WebSocket to server with Protocol=&quot;udp&quot;</li></ul></li></ol><h4 id="server-→-client-direction" tabindex="-1">Server → Client Direction <a class="header-anchor" href="#server-→-client-direction" aria-label="Permalink to &quot;Server → Client Direction&quot;">​</a></h4><ol><li><p><strong>Server Reception</strong></p><ul><li>Server receives UDP packet from remote target</li><li>Server knows the source address of the incoming packet</li></ul></li><li><p><strong>SOCKS5 UDP Header Construction</strong></p><ul><li>Server constructs SOCKS5 UDP header with source address information</li><li>Format matches SOCKS5 specification</li></ul></li><li><p><strong>WebSocket Transmission</strong></p><ul><li>Create DataMessage with SOCKS5 UDP header + data</li><li>Send to client via WebSocket</li></ul></li><li><p><strong>Client Forwarding</strong></p><ul><li>Client receives DataMessage and forwards to local UDP listener</li><li>SOCKS5 client receives packet with proper source address information</li></ul></li></ol><h3 id="udp-connection-lifecycle" tabindex="-1">UDP Connection Lifecycle <a class="header-anchor" href="#udp-connection-lifecycle" aria-label="Permalink to &quot;UDP Connection Lifecycle&quot;">​</a></h3><ul><li><strong>Association</strong>: Lasts until SOCKS5 TCP control connection closes</li><li><strong>Timeout</strong>: UDP associations may timeout if inactive</li><li><strong>Cleanup</strong>: When association ends, local UDP listener is closed and resources freed</li></ul><h2 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;Performance&quot;">​</a></h2><h3 id="data-compression" tabindex="-1">Data Compression <a class="header-anchor" href="#data-compression" aria-label="Permalink to &quot;Data Compression&quot;">​</a></h3><p>DataMessage supports conditional compression when data size exceeds the compression threshold (default: 512KB, configurable via <code>WithCompressionThreshold</code>). Compression flag in DataMessage is set to 0x01 for gzip compression.</p><h3 id="batch-processing" tabindex="-1">Batch Processing <a class="header-anchor" href="#batch-processing" aria-label="Permalink to &quot;Batch Processing&quot;">​</a></h3><p>LinkSocks implements dynamic batching for network data reads:</p><p><strong>SendManager Batching</strong></p><ul><li>Network data is batched in a buffer before creating DataMessage</li><li>Default batch wait time: 20ms minimum, 500ms maximum</li><li>Adaptive batching adjusts delay based on connection speed</li><li>Timer-based flushing when delay expires or buffer is full</li></ul><p><strong>Batching Control</strong></p><ul><li>Dynamic batching can be disabled via <code>WithDynamicBatching(false)</code> for immediate sending</li><li>High-speed connections increase batch delay</li><li>Low-speed connections reduce batch delay</li><li>Buffer size and timing limits are configurable via <code>WithBatchingTimeLimits</code></li></ul><h2 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><h3 id="client-server-connection-failures" tabindex="-1">Client-Server Connection Failures <a class="header-anchor" href="#client-server-connection-failures" aria-label="Permalink to &quot;Client-Server Connection Failures&quot;">​</a></h3><p><strong>When token validation fails</strong></p><ul><li>Server sends <code>AuthResponseMessage{Success: false, Error: &quot;invalid token&quot;}</code></li><li>WebSocket connection is immediately closed</li><li>Client receives nonRetriableError and stops reconnection attempts</li></ul><p><strong>When WebSocket connection is lost</strong></p><ul><li>Client checks if reconnect is enabled and error is not nonRetriableError</li><li>Waits ReconnectDelay (default: 5s; configurable via ClientOption.WithReconnectDelay) before attempting reconnection</li><li>Existing channels remain in memory, DataMessages continue queuing</li><li>Data transmission resumes after successful reconnection</li></ul><p><strong>When no clients are available for load balancing</strong></p><ul><li>Server waits 10 seconds to find available reverse proxy clients</li><li>Uses round-robin selection with ping liveness checks</li><li>If ping fails, selects next available client</li><li>After 10 seconds with no clients, sends error code 0x03 to SOCKS5 client</li></ul><h3 id="network-connection-failures" tabindex="-1">Network Connection Failures <a class="header-anchor" href="#network-connection-failures" aria-label="Permalink to &quot;Network Connection Failures&quot;">​</a></h3><p><strong>When target server connection fails</strong></p><ul><li>Normal mode: immediately sends <code>ConnectResponseMessage{Success: false, Error: details}</code></li><li>SOCKS5 client receives error response (code 0x04) and connection is closed</li><li>FastOpen mode: assumes success initially, detects failure on first data transmission</li><li>FastOpen timeout: disconnects channel if no success confirmation after ConnectTimeout+5 seconds</li></ul><p><strong>When remote peer closes connection</strong></p><ul><li>Sends <code>DisconnectMessage{ChannelID: channelID, Error: details}</code></li><li>Cleans up resources: removes message queue, deletes from channel maps, cancels context</li><li>Closes SOCKS5 client connection to signal termination</li></ul><p><strong>When connection closes abnormally</strong></p><ul><li>Channel cleaner checks activity every 60 seconds</li><li>Channels inactive for 12 hours are automatically cleaned up</li><li>RST packets or network timeouts trigger immediate resource cleanup</li><li>Individual channel failures do not affect other channels on the same WebSocket</li></ul>`,71)]))}const g=n(o,[["render",t]]);export{u as __pageData,g as default};
