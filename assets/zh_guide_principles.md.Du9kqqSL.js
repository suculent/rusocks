import{_ as t,a as e}from"./chunks/reverse_proxy_diagram.wO_OGZ4h.js";import{_ as r,c as o,o as i,ae as l}from"./chunks/framework.U1Gow_7P.js";const b=JSON.parse('{"title":"工作原理","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/principles.md","filePath":"zh/guide/principles.md"}'),n={name:"zh/guide/principles.md"};function s(c,a,h,d,g,p){return i(),o("div",null,a[0]||(a[0]=[l('<h1 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h1><p>LinkSocks 主要运行在两种代理模式下，每种模式都为不同的网络场景而设计。</p><h2 id="正向代理" tabindex="-1">正向代理 <a class="header-anchor" href="#正向代理" aria-label="Permalink to &quot;正向代理&quot;">​</a></h2><p>正向代理允许服务器暴露其内部网络环境，同时保护其 IP 地址不被暴露。</p><p>首先，在一台能够托管网站并可从公共互联网访问的机器上启动 LinkSocks 服务器，并添加一个令牌。</p><p>然后，在需要访问服务器内部网络环境的设备上，启动 LinkSocks 客户端并使用令牌连接到指定的 URL。由于传输使用 WebSocket 协议，任何支持 WebSocket 的 Web 防火墙（如 Cloudflare）都可以用作中间层来保护服务器的 IP 地址不被暴露。</p><p>连接后，客户端将开放一个可配置的 SOCKS5 端口供其他服务连接。所有请求将通过建立的双向通道转发，服务器执行实际连接并发送数据。</p><p><img src="'+t+'" alt="正向代理图"></p><h3 id="正向代理使用场景" tabindex="-1">正向代理使用场景 <a class="header-anchor" href="#正向代理使用场景" aria-label="Permalink to &quot;正向代理使用场景&quot;">​</a></h3><ul><li><strong>访问受限网络</strong>：通过中央服务器连接到内部服务</li><li><strong>IP 保护</strong>：在发出请求时隐藏您的真实 IP</li><li><strong>绕过防火墙</strong>：使用 WebSocket 传输绕过传统防火墙限制</li></ul><h2 id="反向代理" tabindex="-1">反向代理 <a class="header-anchor" href="#反向代理" aria-label="Permalink to &quot;反向代理&quot;">​</a></h2><p>反向代理允许无法从公共互联网直接访问的设备暴露其内部网络环境。</p><p>首先，在一台能够托管网站并可从公共互联网访问的机器上启动 LinkSocks 服务器，并添加一个令牌。</p><p>然后，在内部网络服务器上启动 LinkSocks 客户端并使用令牌连接到指定的 URL。由于传输使用 WebSocket 协议，任何支持 WebSocket 的 Web 防火墙（如 Cloudflare）都可以用作中间层来保护服务器的 IP 不被暴露。</p><p>连接后，服务器将暴露一个 SOCKS5 端口供其他服务连接。所有请求将通过建立的双向通道转发，客户端执行实际连接并发送数据。</p><p><img src="'+e+'" alt="反向代理图"></p><h3 id="反向代理使用场景" tabindex="-1">反向代理使用场景 <a class="header-anchor" href="#反向代理使用场景" aria-label="Permalink to &quot;反向代理使用场景&quot;">​</a></h3><ul><li><strong>内部网络访问</strong>：访问没有公网 IP 地址的机器上的服务</li><li><strong>负载均衡</strong>：多个客户端可以提供网络访问并自动负载均衡</li><li><strong>验证码解决</strong>：使用多样化的客户端网络进行验证码解决和 IP 轮换</li><li><strong>渗透测试</strong>：在攻陷内部网络服务器后，直接向外渗透</li></ul><h2 id="技术优势" tabindex="-1">技术优势 <a class="header-anchor" href="#技术优势" aria-label="Permalink to &quot;技术优势&quot;">​</a></h2><h3 id="websocket-传输" tabindex="-1">WebSocket 传输 <a class="header-anchor" href="#websocket-传输" aria-label="Permalink to &quot;WebSocket 传输&quot;">​</a></h3><ul><li><strong>防火墙友好</strong>：WebSocket 流量看起来像普通的 HTTP 流量</li><li><strong>WAF 兼容</strong>：可以通过 Web 应用防火墙（如 Cloudflare）工作</li><li><strong>CDN 支持</strong>：可以部署在 CDN 后面以增强安全性</li><li><strong>SSL/TLS 支持</strong>：使用 WSS 协议进行安全传输</li></ul><h3 id="动态客户端管理" tabindex="-1">动态客户端管理 <a class="header-anchor" href="#动态客户端管理" aria-label="Permalink to &quot;动态客户端管理&quot;">​</a></h3><ul><li><strong>无需配置</strong>：客户端可以加入和离开而无需服务器重新配置</li><li><strong>自动扩展</strong>：系统根据可用的客户端容量进行扩展</li><li><strong>负载均衡</strong>：在可用客户端之间进行轮询分发</li><li><strong>容错性</strong>：客户端断开连接时自动故障转移</li></ul><h3 id="协议支持" tabindex="-1">协议支持 <a class="header-anchor" href="#协议支持" aria-label="Permalink to &quot;协议支持&quot;">​</a></h3><ul><li><strong>完整的 SOCKS5</strong>：完整的 SOCKS5 协议实现</li><li><strong>身份验证</strong>：基于令牌的身份验证以确保安全连接</li><li><strong>IPv6 支持</strong>：完整的 IPv6 连接支持</li><li><strong>UDP 支持</strong>：通过 SOCKS5 的 UDP 以提供全面的协议覆盖</li></ul>',25)]))}const k=r(n,[["render",s]]);export{b as __pageData,k as default};
