import{_ as s,c as i,o as t,ae as e}from"./chunks/framework.U1Gow_7P.js";const c=JSON.parse('{"title":"快速打开","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/fast-open.md","filePath":"zh/guide/fast-open.md"}'),n={name:"zh/guide/fast-open.md"};function l(h,a,o,p,r,d){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="快速打开" tabindex="-1">快速打开 <a class="header-anchor" href="#快速打开" aria-label="Permalink to &quot;快速打开&quot;">​</a></h1><p>快速打开是一个性能优化功能，通过简化 SOCKS5 握手过程显著减少连接延迟。它特别适用于发出<strong>大量请求</strong>的应用程序，如网页浏览。</p><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><p>快速打开通过允许 SOCKS5 端立即回复&quot;成功&quot;来优化 CONNECT 握手，使应用程序能够立即发送数据而无需等待完整握手完成。</p><div class="tip custom-block"><p class="custom-block-title">性能优势</p><p>快速打开在连接建立期间节省<strong>一个完整往返时间（RTT）</strong>，显著改善发出许多连接的应用程序的感知性能。</p></div><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><p>快速打开可以在不同组件上独立启用：</p><h3 id="服务器端-反向代理模式" tabindex="-1">服务器端（反向代理模式） <a class="header-anchor" href="#服务器端-反向代理模式" aria-label="Permalink to &quot;服务器端（反向代理模式）&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在服务器上启用快速打开</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">linksocks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> token</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --fast-open</span></span></code></pre></div><h3 id="客户端-正向代理模式" tabindex="-1">客户端（正向代理模式） <a class="header-anchor" href="#客户端-正向代理模式" aria-label="Permalink to &quot;客户端（正向代理模式）&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在客户端上启用快速打开</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">linksocks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> token</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ws://server:8765</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --fast-open</span></span></code></pre></div><h2 id="超时设置和连接失败处理" tabindex="-1">超时设置和连接失败处理 <a class="header-anchor" href="#超时设置和连接失败处理" aria-label="Permalink to &quot;超时设置和连接失败处理&quot;">​</a></h2><p>快速打开的默认超时为<strong>ConnectTimeout（10 秒）+ 5 秒保护时间</strong>。这意味着代理在发送立即成功响应后将等待最多 15 秒来建立实际连接。</p><p>如果 15 秒后没有收到服务器响应，或者服务器响应无法建立连接，连接将被关闭。这确保失败的连接不会留下悬挂的套接字。</p><h2 id="潜在问题和限制" tabindex="-1">潜在问题和限制 <a class="header-anchor" href="#潜在问题和限制" aria-label="Permalink to &quot;潜在问题和限制&quot;">​</a></h2><p>快速打开在某些情况下可能会引起问题：</p><ul><li><strong>应用程序假设立即连接</strong>：一些应用程序可能假设成功的 SOCKS5 CONNECT 响应意味着连接立即准备好进行数据传输</li><li><strong>错误处理复杂性</strong>：应用程序可能在实际连接失败之前接收数据，导致混乱的错误状态</li><li><strong>网络不稳定</strong>：在不稳定的网络环境中，延迟的连接建立可能导致更多超时</li></ul><div class="warning custom-block"><p class="custom-block-title">何时禁用快速打开</p><p>如果您遇到连接问题、应用程序错误或意外超时，请尝试通过移除 <code>--fast-open</code> 标志来禁用快速打开。快速打开在稳定网络和能够处理异步连接建立的应用程序中效果最佳。</p></div>`,18)]))}const g=s(n,[["render",l]]);export{c as __pageData,g as default};
